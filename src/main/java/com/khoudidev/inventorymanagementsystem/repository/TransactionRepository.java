package com.khoudidev.inventorymanagementsystem.repository;

import com.khoudidev.inventorymanagementsystem.entity.Transaction;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;


@Repository
public interface TransactionRepository extends JpaRepository<Transaction, Long> {


    @Query("SELECT t FROM Transaction t " +

            "WHERE YEAR(t.createdAt) = :year AND MONTH(t.createdAt) = :month")
    List<Transaction> findAllByMonthAndYear (@Param("month") int month, @Param("year") int year);

//we are searching these field; TransactionDTO's description, note, status, ProductDTO's name, sku



    @Query("SELECT t FROM Transaction t " +

            "LEFT JOIN t.product p " +

           "WHERE (:searchText IS NULL OR " +
            "LOWER(t.description) LIKE LOWER (CONCAT('%', :searchText, '%')) OR " +

         "LOWER(t.status) LIKE LOWER (CONCAT('%', :searchText, '%')) OR "+

        "LOWER(p.name) LIKE LOWER (CONCAT('%', :searchText, '%')) OR " +

        "LOWER(p.sku) LIKE LOWER(CONCAT('%', :searchText, '%')))")

    Page<Transaction> searchTransactions(@Param("searchText") String searchText, Pageable pageable);
}







//
//Ce code d√©finit une **interface `TransactionRepository`** dans un projet **Spring Boot** qui utilise **Spring Data JPA** pour acc√©der √† la base de donn√©es. Il permet d'ex√©cuter des requ√™tes complexes sur l'entit√© `TransactionDTO` en utilisant le m√©canisme de requ√™tes personnalis√©es de **JPQL (Java Persistence Query Language)**.
//
//        ---
//
//        ## üìÇ **Package et Imports**
//        ```java
//package com.khoudidev.inventorymanagementsystem.repository;
//```
//        üëâ Le fichier est plac√© dans le package `com.khoudidev.inventorymanagementsystem.repository`, qui suit la structure standard de projet Spring Boot (`repository` pour la couche d'acc√®s aux donn√©es).
//
//        ### ‚úÖ **Imports**
//        ```java
//        import com.khoudidev.inventorymanagementsystem.entity.TransactionDTO;
//import org.springframework.data.domain.Page;
//import org.springframework.data.domain.Pageable;
//import org.springframework.data.jpa.repository.JpaRepository;
//import org.springframework.data.jpa.repository.Query;
//import org.springframework.data.repository.query.Param;
//import org.springframework.stereotype.Repository;
//
//import java.util.List;
//```
//
//        | Import | Description |
//        |--------|-------------|
//        | `TransactionDTO` | L'entit√© √† laquelle ce repository est li√©. |
//        | `Page` et `Pageable` | Fournit la pagination et le tri. |
//        | `JpaRepository` | Interface de base de Spring Data JPA pour les op√©rations CRUD. |
//        | `@Query` | Permet d'√©crire des requ√™tes personnalis√©es JPQL. |
//        | `@Param` | Permet de passer des param√®tres aux requ√™tes personnalis√©es. |
//        | `@Repository` | Indique que cette interface est un composant Spring g√©r√© pour la couche d'acc√®s aux donn√©es. |
//
//        ---
//
//        ## üöÄ **1. D√©finition de l'interface `TransactionRepository`**
//        ```java
//@Repository
//public interface TransactionRepository extends JpaRepository<TransactionDTO, Long> {
//```
//        ### ‚úÖ **H√©ritage de `JpaRepository`**
//    L'interface `TransactionRepository` h√©rite de `JpaRepository<TransactionDTO, Long>`, ce qui permet de b√©n√©ficier automatiquement des m√©thodes CRUD :
//
//            | M√©thode h√©rit√©e | Description |
//            |----------------|-------------|
//            | `save(T entity)` | Enregistre une nouvelle entit√© ou met √† jour une entit√© existante. |
//            | `findById(Long id)` | Recherche une entit√© par son `id`. |
//            | `findAll()` | Retourne toutes les entit√©s. |
//            | `deleteById(Long id)` | Supprime une entit√© par son `id`. |
//            | `count()` | Retourne le nombre total d'entit√©s. |
//
//            ### üîé **Signature compl√®te**
//            - `TransactionDTO` ‚Üí L'entit√© manipul√©e par le repository.
//            - `Long` ‚Üí Type de la cl√© primaire de l'entit√© `TransactionDTO`.
//
//            ---
//
//            ## üéØ **2. Requ√™te personnalis√©e `findAllByMonthAndYear`**
//            ```java
//    @Query("SELECT t FROM TransactionDTO t " +
//            "WHERE YEAR(t.createdAt) = :year AND MONTH(t.createdAt) = :month")
//    List<TransactionDTO> findAllByMonthAndYear(@Param("month") int month, @Param("year") int year);
//```
//
//        ### üõ†Ô∏è **Explication d√©taill√©e**
//            1. **@Query** ‚Üí Permet d'√©crire une requ√™te personnalis√©e JPQL.
//            2. **JPQL** ‚Üí Langage bas√© sur SQL mais adapt√© aux entit√©s JPA.
//3. **`SELECT t FROM TransactionDTO t`** ‚Üí S√©lectionne toutes les transactions `t`.
//            4. **`WHERE`** ‚Üí Filtre les r√©sultats en fonction de deux conditions :
//            - `YEAR(t.createdAt) = :year` ‚Üí Extrait l'ann√©e de `createdAt` et la compare au param√®tre `year`.
//            - `MONTH(t.createdAt) = :month` ‚Üí Extrait le mois de `createdAt` et le compare au param√®tre `month`.
//            5. **@Param("month") / @Param("year")** ‚Üí Lie les param√®tres de la m√©thode √† la requ√™te JPQL.
//
//            ### ‚úÖ **Exemple d'appel :**
//            ```java
//    List<TransactionDTO> transactions = transactionRepository.findAllByMonthAndYear(3, 2025);
//transactions.forEach(System.out::println);
//```
//        üëâ Retourne une **liste (`List<TransactionDTO>`)** de transactions cr√©√©es en **mars 2025**.
//
//            ---
//
//            ## üéØ **3. Recherche avanc√©e avec `searchTransactions`**
//            ```java
//    @Query("SELECT t FROM TransactionDTO t " +
//            "LEFT JOIN t.product p " +
//            "WHERE (:searchText IS NULL OR " +
//            "LOWER(t.description) LIKE LOWER(CONCAT('%', :searchText, '%')) OR " +
//            "LOWER(t.status) LIKE LOWER(CONCAT('%', :searchText, '%')) OR " +
//            "LOWER(p.name) LIKE LOWER(CONCAT('%', :searchText, '%')) OR " +
//            "LOWER(p.sku) LIKE LOWER(CONCAT('%', :searchText, '%')))")
//    Page<TransactionDTO> searchTransactions(@Param("searchText") String searchText, Pageable pageable);
//```
//
//        ### üõ†Ô∏è **Explication d√©taill√©e**
//            1. **@Query** ‚Üí D√©clare une requ√™te personnalis√©e JPQL.
//2. **LEFT JOIN** ‚Üí Effectue une jointure √† gauche entre `TransactionDTO` (`t`) et `ProductDTO` (`p`).
//            - `LEFT JOIN` permet d'inclure les transactions m√™me si le produit associ√© est `null`.
//            3. **WHERE** ‚Üí Conditions de recherche :
//            - **`:searchText IS NULL`** ‚Üí Si le param√®tre est `null`, retourne tous les r√©sultats.
//            - **`LOWER(...)`** ‚Üí Convertit en minuscules pour une recherche insensible √† la casse.
//            - **`LIKE CONCAT('%', :searchText, '%')`** ‚Üí Recherche une correspondance partielle dans le texte.
//
//### üîé **Champs concern√©s dans la recherche :**
//            | Champ dans `TransactionDTO` | Champ dans `ProductDTO` |
//            |--------------------------|-----------------------|
//            | `description` | `name` |
//            | `status` | `sku` |
//
//            ### ‚úÖ **Exemple d'appel :**
//            ```java
//    Pageable pageable = PageRequest.of(0, 10);
//    Page<TransactionDTO> result = transactionRepository.searchTransactions("test", pageable);
//
//result.forEach(System.out::println);
//```
//        üëâ Effectue une recherche pagin√©e en recherchant le mot-cl√© `"test"` dans :
//            - Description de la transaction
//- Statut de la transaction
//- Nom du produit associ√©
//- Code SKU du produit associ√©
//
//### üß† **Pourquoi utiliser `Page` ?**
//            ‚úîÔ∏è Permet de g√©rer la **pagination** des r√©sultats.
//            ‚úîÔ∏è Fournit des m√©thodes pratiques comme :
//            - `getTotalPages()` ‚Üí Nombre total de pages.
//            - `getTotalElements()` ‚Üí Nombre total d'√©l√©ments.
//            - `getContent()` ‚Üí Liste des r√©sultats dans la page.
//
//            ---
//
//            ## üöÄ **4. Pourquoi utiliser `JpaRepository` ?**
//            ### ‚úÖ **Avantages de `JpaRepository` :**
//            ‚úîÔ∏è H√©rite de m√©thodes CRUD (`save`, `findById`, `deleteById`, etc.).
//            ‚úîÔ∏è Gestion simplifi√©e des transactions et de la connexion √† la base de donn√©es.
//‚úîÔ∏è Prise en charge de la **pagination** et du **tri** nativement.
//‚úîÔ∏è Personnalisation des requ√™tes avec `@Query`.
//            ‚úîÔ∏è Simplification de la gestion des `null` gr√¢ce √† `Optional<T>`.
//
//            ---
//
//            ## üåü **5. Bonnes pratiques**
//            ‚úÖ Utiliser `Optional<T>` pour √©viter les `NullPointerException`.
//            ‚úÖ Privil√©gier `LEFT JOIN` lorsqu'une relation peut √™tre `null`.
//            ‚úÖ Toujours utiliser `Pageable` dans les recherches pagin√©es pour am√©liorer les performances.
//            ‚úÖ √âviter d'utiliser `SELECT *` ‚Üí Sp√©cifier les colonnes n√©cessaires pour optimiser la requ√™te.
//            ‚úÖ √âviter les requ√™tes complexes dans le repository ‚Üí Si trop complexe, d√©placer dans le `Service`.
//
//            ---
//
//            ## üî• **6. Exemple complet d'appel dans le Service**
//            ```java
//    @Autowired
//    private TransactionRepository transactionRepository;
//
//    public Page<TransactionDTO> searchTransactions(String searchText, int page, int size) {
//        Pageable pageable = PageRequest.of(page, size);
//        return transactionRepository.searchTransactions(searchText, pageable);
//    }
//```
//
//        ---
//
//        ## ‚úÖ **‚û°Ô∏è R√©sum√©**
//            ‚úîÔ∏è `JpaRepository` ‚Üí Fournit les op√©rations CRUD automatiquement.
//‚úîÔ∏è `@Query` ‚Üí Personnalisation des requ√™tes JPQL.
//            ‚úîÔ∏è `@Param` ‚Üí Lien entre le param√®tre de m√©thode et la requ√™te.
//‚úîÔ∏è `Page` et `Pageable` ‚Üí Gestion automatique de la pagination.
//‚úîÔ∏è `LEFT JOIN` ‚Üí Jointure m√™me si la relation est nulle. üòé
//
//    Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ Ÿäÿπÿ±ŸëŸÅ **Ÿàÿßÿ¨Ÿáÿ© `TransactionRepository`** ŸÅŸä ŸÖÿ¥ÿ±Ÿàÿπ **Spring Boot** ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ **Spring Data JPA** ŸÑŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™. ŸäŸàŸÅÿ± Ÿáÿ∞ÿß ÿßŸÑŸÉŸàÿØ ÿ∑ÿ±ŸäŸÇÿ© ŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßÿ≥ÿ™ÿπŸÑÿßŸÖÿßÿ™ ŸÖÿÆÿµÿµÿ© ÿπŸÑŸâ ŸÉŸäÿßŸÜ **TransactionDTO** ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ **JPQL (Java Persistence Query Language)**.
//
//            ---
//
//            ## üìÇ **ÿßŸÑÿ≠ÿ≤ŸÖÿ© (Package) ŸàÿßŸÑÿßÿ≥ÿ™Ÿäÿ±ÿßÿØÿßÿ™ (Imports)**
//            ```java
//package com.khoudidev.inventorymanagementsystem.repository;
//```
//        üëâ ÿßŸÑŸÖŸÑŸÅ ŸÖŸàÿ¨ŸàÿØ ŸÅŸä ÿßŸÑÿ≠ÿ≤ŸÖÿ© `com.khoudidev.inventorymanagementsystem.repository`ÿå ŸàŸáŸä ÿßŸÑÿ®ŸÜŸäÿ© ÿßŸÑŸÇŸäÿßÿ≥Ÿäÿ© ŸÅŸä ŸÖÿ¥ÿßÿ±Ÿäÿπ **Spring Boot** (ŸÖÿ¨ŸÑÿØ `repository` ŸÖÿÆÿµÿµ ŸÑŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™).
//
//            ### ‚úÖ **ÿßŸÑÿßÿ≥ÿ™Ÿäÿ±ÿßÿØÿßÿ™ (Imports)**
//            ```java
//import com.khoudidev.inventorymanagementsystem.entity.TransactionDTO;
//import org.springframework.data.domain.Page;
//import org.springframework.data.domain.Pageable;
//import org.springframework.data.jpa.repository.JpaRepository;
//import org.springframework.data.jpa.repository.Query;
//import org.springframework.data.repository.query.Param;
//import org.springframework.stereotype.Repository;
//
//import java.util.List;
//```
//
//        | ÿßŸÑÿßÿ≥ÿ™Ÿäÿ±ÿßÿØ | ÿßŸÑŸàÿµŸÅ |
//            |-----------|--------|
//            | `TransactionDTO` | ÿßŸÑŸÉŸäÿßŸÜ (Entity) ÿßŸÑÿ∞Ÿä ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπŸá ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑŸÖÿ≥ÿ™ŸàÿØÿπ. |
//            | `Page` Ÿà `Pageable` | ŸäŸàŸÅÿ±ÿßŸÜ ÿØÿπŸÖŸãÿß ŸÑÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿ•ŸÑŸâ ÿµŸÅÿ≠ÿßÿ™ ŸàŸÅÿ±ÿ≤Ÿáÿß. |
//            | `JpaRepository` | Ÿàÿßÿ¨Ÿáÿ© ÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÅŸä Spring Data JPA ÿ™ŸàŸÅÿ± ÿπŸÖŸÑŸäÿßÿ™ CRUD ŸÖÿ®ÿßÿ¥ÿ±ÿ©. |
//            | `@Query` | ÿ™ŸèŸÖŸÉŸÜŸÉ ŸÖŸÜ ŸÉÿ™ÿßÿ®ÿ© ÿßÿ≥ÿ™ÿπŸÑÿßŸÖÿßÿ™ ŸÖÿÆÿµÿµÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ JPQL. |
//            | `@Param` | ÿ™ÿ±ÿ®ÿ∑ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ (Parameters) ÿ®ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑŸÖÿÆÿµÿµÿ©. |
//            | `@Repository` | ÿ™ÿ¥Ÿäÿ± ÿ•ŸÑŸâ ÿ£ŸÜ Ÿáÿ∞Ÿá ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿ¨ÿ≤ÿ° ŸÖŸÜ ÿ∑ÿ®ŸÇÿ© ÿßŸÑŸàÿµŸàŸÑ ÿ•ŸÑŸâ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ (Data Access Layer). |
//
//            ---
//
//            ## üöÄ **1. ÿ™ÿπÿ±ŸäŸÅ Ÿàÿßÿ¨Ÿáÿ© `TransactionRepository`**
//            ```java
//    @Repository
//    public interface TransactionRepository extends JpaRepository<TransactionDTO, Long> {
//```
//        ### ‚úÖ **Ÿàÿ±ÿßÿ´ÿ© `JpaRepository`**
//        Ÿàÿßÿ¨Ÿáÿ© `TransactionRepository` ÿ™ÿ±ÿ´ ŸÖŸÜ `JpaRepository<TransactionDTO, Long>`ÿå ŸÖŸÖÿß ŸäŸàŸÅÿ± ÿØÿπŸÖŸãÿß ŸÖÿ®ÿßÿ¥ÿ±Ÿãÿß ŸÑÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ™ÿßŸÑŸäÿ©:
//
//                | ÿßŸÑÿπŸÖŸÑŸäÿ© | ÿßŸÑŸàÿµŸÅ |
//                |---------|--------|
//                | `save(T entity)` | ÿ≠ŸÅÿ∏ ŸÉŸäÿßŸÜ ÿ¨ÿØŸäÿØ ÿ£Ÿà ÿ™ÿ≠ÿØŸäÿ´ ŸÉŸäÿßŸÜ ŸÖŸàÿ¨ŸàÿØ. |
//                | `findById(Long id)` | ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ŸÉŸäÿßŸÜ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖÿπÿ±ŸÅŸá (ID). |
//                | `findAll()` | ÿßÿ≥ÿ™ÿ±ÿ¨ÿßÿπ ÿ¨ŸÖŸäÿπ ÿßŸÑŸÉŸäÿßŸÜÿßÿ™. |
//                | `deleteById(Long id)` | ÿ≠ÿ∞ŸÅ ŸÉŸäÿßŸÜ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÖÿπÿ±ŸÅŸá. |
//                | `count()` | ÿ•ÿ±ÿ¨ÿßÿπ ÿßŸÑÿπÿØÿØ ÿßŸÑÿ•ÿ¨ŸÖÿßŸÑŸä ŸÑŸÑŸÉŸäÿßŸÜÿßÿ™. |
//
//                ### üîé **ÿ¥ÿ±ÿ≠ ŸÉÿßŸÖŸÑ:**
//                - `TransactionDTO` ‚Üí ŸäŸÖÿ´ŸÑ ÿßŸÑŸÉŸäÿßŸÜ (Entity) ÿßŸÑÿ∞Ÿä ÿ≥Ÿäÿ™ŸÖ ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπŸá.
//                - `Long` ‚Üí ŸäŸÖÿ´ŸÑ ŸÜŸàÿπ ÿßŸÑŸÖŸÅÿ™ÿßÿ≠ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä (ID) ŸÑŸÑŸÉŸäÿßŸÜ.
//
//                ---
//
//                ## üéØ **2. ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ÿßŸÑŸÖÿÆÿµÿµ `findAllByMonthAndYear`**
//                ```java
//        @Query("SELECT t FROM TransactionDTO t " +
//                "WHERE YEAR(t.createdAt) = :year AND MONTH(t.createdAt) = :month")
//        List<TransactionDTO> findAllByMonthAndYear(@Param("month") int month, @Param("year") int year);
//```
//
//        ### üõ†Ô∏è **ÿ¥ÿ±ÿ≠ ŸÖŸÅÿµŸÑ:**
//                1. **@Query** ‚Üí ÿ™Ÿèÿ≥ÿ™ÿÆÿØŸÖ ŸÑÿ™ÿπÿ±ŸäŸÅ ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ŸÖÿÆÿµÿµ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ JPQL.
//                2. **JPQL** ‚Üí ŸÑÿ∫ÿ© ŸÖÿ¥ÿßÿ®Ÿáÿ© ŸÑŸÄ SQL ŸÑŸÉŸÜŸáÿß ŸÖÿÆÿµÿµÿ© ŸÑŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑŸÉŸäÿßŸÜÿßÿ™ (Entities).
//                3. **`SELECT t FROM TransactionDTO t`** ‚Üí ÿßÿÆÿ™Ÿäÿßÿ± ŸÉŸÑ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ (`TransactionDTO`).
//                4. **`WHERE`** ‚Üí ÿ¥ÿ±Ÿàÿ∑ ÿßŸÑÿ®ÿ≠ÿ´:
//                - **YEAR(t.createdAt) = :year** ‚Üí ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßŸÑÿ≥ŸÜÿ© ŸÖŸÜ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ° (`createdAt`).
//                - **MONTH(t.createdAt) = :month** ‚Üí ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßŸÑÿ¥Ÿáÿ± ŸÖŸÜ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ŸÜÿ¥ÿßÿ° (`createdAt`).
//                5. **@Param("month") / @Param("year")** ‚Üí ÿ±ÿ®ÿ∑ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿ®ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖ.
//
//### ‚úÖ **ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ:**
//                ```java
//        List<TransactionDTO> transactions = transactionRepository.findAllByMonthAndYear(3, 2025);
//transactions.forEach(System.out::println);
//```
//        üëâ ŸäŸèÿ±ÿ¨ÿπ ŸÇÿßÿ¶ŸÖÿ© ÿ®ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ§Ÿáÿß ŸÅŸä **ŸÖÿßÿ±ÿ≥ 2025**.
//
//                ---
//
//                ## üéØ **3. ÿßŸÑÿ®ÿ≠ÿ´ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ `searchTransactions`**
//                ```java
//        @Query("SELECT t FROM TransactionDTO t " +
//                "LEFT JOIN t.product p " +
//                "WHERE (:searchText IS NULL OR " +
//                "LOWER(t.description) LIKE LOWER(CONCAT('%', :searchText, '%')) OR " +
//                "LOWER(t.status) LIKE LOWER(CONCAT('%', :searchText, '%')) OR " +
//                "LOWER(p.name) LIKE LOWER(CONCAT('%', :searchText, '%')) OR " +
//                "LOWER(p.sku) LIKE LOWER(CONCAT('%', :searchText, '%')))")
//        Page<TransactionDTO> searchTransactions(@Param("searchText") String searchText, Pageable pageable);
//```
//
//        ### üõ†Ô∏è **ÿ¥ÿ±ÿ≠ ŸÖŸÅÿµŸÑ:**
//                1. **@Query** ‚Üí ÿ™ÿπÿ±ŸäŸÅ ÿßÿ≥ÿ™ÿπŸÑÿßŸÖ ŸÖÿÆÿµÿµ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ JPQL.
//2. **LEFT JOIN** ‚Üí ÿ±ÿ®ÿ∑ ÿßŸÑÿ¨ÿØŸàŸÑ `TransactionDTO` ŸÖÿπ ÿßŸÑÿ¨ÿØŸàŸÑ `ProductDTO`.
//                - `LEFT JOIN` Ÿäÿ≥ŸÖÿ≠ ÿ®ÿ•ÿ∏Ÿáÿßÿ± ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿ≠ÿ™Ÿâ ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸáŸÜÿßŸÉ ŸÖŸÜÿ™ÿ¨ ŸÖÿ±ÿ™ÿ®ÿ∑ ÿ®ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©.
//3. **WHERE** ‚Üí ÿ¥ÿ±Ÿàÿ∑ ÿßŸÑÿ®ÿ≠ÿ´:
//                - **`:searchText IS NULL`** ‚Üí ÿ•ÿ∞ÿß ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•ÿØÿÆÿßŸÑ ŸÜÿµ ÿßŸÑÿ®ÿ≠ÿ´ÿå Ÿäÿ™ŸÖ ÿπÿ±ÿ∂ ŸÉŸÑ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨.
//                - **`LOWER(...)`** ‚Üí ŸÑÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÜÿµ ÿ•ŸÑŸâ ÿ£ÿ≠ÿ±ŸÅ ÿµÿ∫Ÿäÿ±ÿ© (ŸÑÿ•ÿ¨ÿ±ÿßÿ° ÿ®ÿ≠ÿ´ ÿ∫Ÿäÿ± ÿ≠ÿ≥ÿßÿ≥ ŸÑÿ≠ÿßŸÑÿ© ÿßŸÑÿ£ÿ≠ÿ±ŸÅ).
//                - **`LIKE CONCAT('%', :searchText, '%')`** ‚Üí ŸÑŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ŸÜÿµ ŸÖÿπŸäŸÜ ÿØÿßÿÆŸÑ ÿßŸÑÿ≠ŸÇŸÑ.
//
//                ### üîé **ÿßŸÑÿ®ÿ≠ÿ´ Ÿäÿ¥ŸÖŸÑ:**
//                | ÿßŸÑÿ≠ŸÇŸÑ ŸÅŸä `TransactionDTO` | ÿßŸÑÿ≠ŸÇŸÑ ŸÅŸä `ProductDTO` |
//                |-----------------------|---------------------|
//                | `description` | `name` |
//                | `status` | `sku` |
//
//                ### ‚úÖ **ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ:**
//                ```java
//        Pageable pageable = PageRequest.of(0, 10);
//        Page<TransactionDTO> result = transactionRepository.searchTransactions("test", pageable);
//
//result.forEach(System.out::println);
//```
//        üëâ Ÿäÿ™ŸÖ ÿßŸÑÿ®ÿ≠ÿ´ ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ÿßŸÑŸÉŸÑŸÖÿ© `"test"` ŸÅŸä:
//                - ŸàÿµŸÅ ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©
//- ÿ≠ÿßŸÑÿ© ÿßŸÑŸÖÿπÿßŸÖŸÑÿ©
//- ÿßÿ≥ŸÖ ÿßŸÑŸÖŸÜÿ™ÿ¨
//- ŸÉŸàÿØ ÿßŸÑŸÖŸÜÿ™ÿ¨ (SKU)
//
//### üß† **ŸÑŸÖÿßÿ∞ÿß ŸÜÿ≥ÿ™ÿÆÿØŸÖ `Page`ÿü**
//                ‚úîÔ∏è ŸÑÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿπŸÑŸâ ÿπÿØÿ© ÿµŸÅÿ≠ÿßÿ™.
//‚úîÔ∏è ÿ™ŸàŸÅŸäÿ± ÿØÿπŸÖ ŸÉÿßŸÖŸÑ ŸÑŸÑŸÅÿ±ÿ≤ ŸàÿßŸÑÿ™ÿµŸÅŸäÿ©.
//
//---
//
//        ## üöÄ **4. ŸÑŸÖÿßÿ∞ÿß ŸÜÿ≥ÿ™ÿÆÿØŸÖ `JpaRepository`ÿü**
//                ### ‚úÖ **ŸÖÿ≤ÿßŸäÿß `JpaRepository`:**
//                ‚úîÔ∏è ÿ™ŸàŸÅŸäÿ± ÿ¨ŸÖŸäÿπ ÿßŸÑÿπŸÖŸÑŸäÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ© (CRUD) ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß.
//                ‚úîÔ∏è ÿØÿπŸÖ ŸÉÿßŸÖŸÑ ŸÑŸÑÿµŸÅÿ≠ÿßÿ™ (Pagination) ŸàÿßŸÑŸÅÿ±ÿ≤ (Sorting).
//                ‚úîÔ∏è ÿ•ÿØÿßÿ±ÿ© ÿ™ŸÑŸÇÿßÿ¶Ÿäÿ© ŸÑŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ (Transactions).
//                ‚úîÔ∏è ŸÉÿ™ÿßÿ®ÿ© ÿßÿ≥ÿ™ÿπŸÑÿßŸÖÿßÿ™ ŸÖÿÆÿµÿµÿ© ÿ®ÿ≥ŸáŸàŸÑÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ **@Query**.
//                ‚úîÔ∏è ÿßŸÑÿ™ÿπÿßŸÖŸÑ ŸÖÿπ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ±ÿ™ÿ®ÿ∑ÿ© (Relationships) ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿ≥ŸáŸÑÿ©.
//
//                ---
//
//                ## üåü **5. ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™ (Best Practices)**
//                ‚úÖ ÿßÿ≥ÿ™ÿÆÿØŸÖ **Optional<T>** ÿπŸÜÿØ ÿßŸÑÿ®ÿ≠ÿ´ ŸÑÿ™ÿ¨ŸÜÿ® `NullPointerException`.
//                ‚úÖ ÿßÿ≥ÿ™ÿÆÿØŸÖ **LEFT JOIN** ÿπŸÜÿØ ÿßŸÑÿ®ÿ≠ÿ´ ŸÅŸä ÿ¨ÿØÿßŸàŸÑ ŸÖÿ±ÿ™ÿ®ÿ∑ÿ© ŸÑÿ™ÿ¨ŸÜÿ® ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿ∫Ÿäÿ± ÿßŸÑŸÖŸÉÿ™ŸÖŸÑÿ©.
//‚úÖ ÿßÿ≥ÿ™ÿÆÿØŸÖ `Pageable` ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ŸÜÿ™ÿßÿ¶ÿ¨ ŸÖŸáŸäŸÉŸÑÿ© ŸÅŸä ÿµŸÅÿ≠ÿßÿ™.
//                ‚úÖ ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ `SELECT *` ‚Üí ÿ≠ÿØÿØ ÿßŸÑÿ£ÿπŸÖÿØÿ© ÿßŸÑŸÖÿ∑ŸÑŸàÿ®ÿ© ŸÅŸÇÿ∑ ŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿ£ÿØÿßÿ°.
//                ‚úÖ ÿ•ÿ∞ÿß ÿ£ÿµÿ®ÿ≠ÿ™ ÿßŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖÿßÿ™ ŸÖÿπŸÇÿØÿ© ‚Üí ÿßŸÜŸÇŸÑŸáÿß ÿ•ŸÑŸâ ÿßŸÑÿ∑ÿ®ŸÇÿ© ÿßŸÑÿÆÿØŸÖŸäÿ© (`Service Layer`).
//
//                ---
//
//                ## üî• **6. ŸÖÿ´ÿßŸÑ ŸÉÿßŸÖŸÑ ŸÅŸä ÿßŸÑÿ∑ÿ®ŸÇÿ© ÿßŸÑÿÆÿØŸÖŸäÿ© (Service Layer)**
//                ```java
//        @Autowired
//        private TransactionRepository transactionRepository;
//
//        public Page<TransactionDTO> searchTransactions(String searchText, int page, int size) {
//            Pageable pageable = PageRequest.of(page, size);
//            return transactionRepository.searchTransactions(searchText, pageable);
//        }
//```
//
//        ---
//
//        ## ‚úÖ **‚û°Ô∏è ÿßŸÑŸÖŸÑÿÆÿµ**
//                ‚úîÔ∏è **JpaRepository** ‚Üí ŸäŸàŸÅÿ± ÿØÿπŸÖŸãÿß ÿ™ŸÑŸÇÿßÿ¶ŸäŸãÿß ŸÑÿπŸÖŸÑŸäÿßÿ™ CRUD.
//‚úîÔ∏è **@Query** ‚Üí Ÿäÿ≥ŸÖÿ≠ ÿ®ŸÉÿ™ÿßÿ®ÿ© ÿßÿ≥ÿ™ÿπŸÑÿßŸÖÿßÿ™ ŸÖÿÆÿµÿµÿ©.
//                ‚úîÔ∏è **@Param** ‚Üí ŸÑÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑŸÖÿπÿßŸÖŸÑÿßÿ™ ŸÑŸÑÿßÿ≥ÿ™ÿπŸÑÿßŸÖ.
//‚úîÔ∏è **Page Ÿà Pageable** ‚Üí ŸÑÿ•ÿØÿßÿ±ÿ© ŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑÿ®ÿ≠ÿ´ ŸàÿßŸÑŸÅÿ±ÿ≤.
//                ‚úîÔ∏è **LEFT JOIN** ‚Üí ŸÑÿ±ÿ®ÿ∑ ÿßŸÑÿ¨ÿØÿßŸàŸÑ ÿ≠ÿ™Ÿâ ŸÖÿπ ÿßŸÑŸÇŸäŸÖ ÿßŸÑŸÅÿßÿ±ÿ∫ÿ©. üòé
